Please read the whole file.Blind264 is intended only to make DXVA compliant encodes. This means 4:2:0 only, 8-bit depth only, L4.1 only. Part of the reason for doing this is to maximize compatibility with mobile devices, which struggle much more non-DXVA encodes. Furthermore, breaking compatibility doesn't usually save more than 5% bitrate total at a given quality.Blind264 comes with a configuration file. The first set of settings relates to the filepath of various tools. If the default config values are not used, blind264 will assume that a full filepath has been included. All values included in the config file can be adjusted on the fly using the cli. All values that can be adjusted in the cli have the defaults set in config.txt. Be aware that changing settings can affect how b264 operated. It should all be explained in the readme though, so don't be too paranoid.If you do not want to use the default location of config.txt ("C:/b264/config.txt"), then the first command line argument must be --conf New:\Filepath\to.exeThus far b264 has minimal error checking and therefore might crash if you use bad input. This will hopefully be fixed with future versions. Please report/post any annoying crashes or bugs or ways to improve b264.The source file should be an avs that has one line: ffvideosource("C:\asdf\source.mkv").Crop(x,x,x,x).DeInterlaceOrDeTelecineIfNeeded()Blind264 will manage the rest of the script writing, including SelectRangeEvery and Spline36Resize.Blind264 has a log that it saves in the log directory that gets defined in the config file, blind264 will also save all x264 logs to this directory, and all encoded videos to this directory. It's reccommended that for hd encoding you have lots of spare hd space (20-30 GB not including the source file)      The algorithm that guesses qcomp starts at the default value (example .7), does an encode, then tests .05 higher (example .75), and depending on which performed better and by how much, it will test either higher values or lower values. The bframes code looks at the values for consecutive bframes and returns the highest bframes value such that each bframe added is worth at least 'bframethreshold' more percent.example: 10, 5, 1, 1, 5 --> if "bframethreshold" is 2, {10} will be added b/c it's worth 2, {5} will be added because it's worth 2, then {1, 1, 5} will be added b/c the whole thing is worth 7 (more than 2 per bframe added)example2: 10, 5, 0, 0, 5, 0, 1, 1, 3 --> if "bframethreshold" is 2, {10} and {5} will be added, but nothing else will be added because the remaining string never gets back up to an average of 2 per bframe added======Optional, but useful======when using the cli:--config = --conf = --c--x264loc = --x264 = --x--avs2yucloc = --avs2yuv == --al--logdir = --dir = --ld--x264def = --xd--x264cur = --xc--avs = --a--psize = --p--mode = --m